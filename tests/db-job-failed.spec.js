const test = require('tape')
const Promise = require('bluebird')
const moment = require('moment')
const testQueue = require('./test-queue')
const enums = require('../src/enums')
const dbJobFailed = require('../src/db-job-failed')
const testData = require('./test-options').testData

module.exports = function () {
  return new Promise((resolve, reject) => {
    test('db-job-failed test', (t) => {
      t.plan(53)

      const q = testQueue()
      const job = q.createJob(testData)

      q.addJob(job).then((savedJob) => {
        t.equal(savedJob[0].id, job.id, 'Job saved successfully')
        t.pass('Job failure - original')
        return dbJobFailed(null, savedJob[0], testData)
      }).then((retry1) => {
        t.equal(retry1[0].status, enums.jobStatus.retry, 'Job status is retry')
        t.equal(retry1[0].retryCount, 1, 'Job retryCount is 1')
        t.equal(retry1[0].progress, 0, 'Job progress is 0')
        t.ok(moment.isDate(retry1[0].dateFailed), 'Job dateFailed is a date')
        t.equal(retry1[0].log.length, 1, 'Job has 1 log entry')
        t.ok(moment.isDate(retry1[0].log[0].logDate), 'Log logDate is a date')
        t.equal(retry1[0].log[0].queueId, q.id, 'Log queueId is valid')
        t.equal(retry1[0].log[0].logType, enums.log.error, 'Log type is error')
        t.equal(retry1[0].log[0].status, enums.jobStatus.retry, 'Log status is retry')
        t.equal(retry1[0].log[0].queueMessage, enums.message.failed, 'Log queueMessage is correct')
        t.ok(retry1[0].log[0].duration >= 0, 'Log duration is >= 0')
        t.equal(retry1[0].log[0].jobData, job.data, 'Log jobData is valid')
        t.pass('Job failure - first retry')
        return dbJobFailed(null, retry1[0], testData)
      }).then((retry2) => {
        t.equal(retry2[0].status, enums.jobStatus.retry, 'Job status is retry')
        t.equal(retry2[0].retryCount, 2, 'Job retryCount is 2')
        t.equal(retry2[0].progress, 0, 'Job progress is 0')
        t.ok(moment.isDate(retry2[0].dateFailed), 'Job dateFailed is a date')
        t.equal(retry2[0].log.length, 2, 'Job has 2 log entries')
        t.ok(moment.isDate(retry2[0].log[1].logDate), 'Log logDate is a date')
        t.equal(retry2[0].log[1].queueId, q.id, 'Log queueId is valid')
        t.equal(retry2[0].log[1].logType, enums.log.error, 'Log type is error')
        t.equal(retry2[0].log[1].status, enums.jobStatus.retry, 'Log status is retry')
        t.equal(retry2[0].log[1].queueMessage, enums.message.failed, 'Log queueMessage is correct')
        t.ok(retry2[0].log[1].duration >= 0, 'Log duration is >= 0')
        t.equal(retry2[0].log[1].jobData, job.data, 'Log jobData is valid')
        t.pass('Job failure - second retry')
        return dbJobFailed(null, retry2[0], testData)
      }).then((retry3) => {
        t.equal(retry3[0].status, enums.jobStatus.retry, 'Job status is retry')
        t.equal(retry3[0].retryCount, 3, 'Job retryCount is 3')
        t.equal(retry3[0].progress, 0, 'Job progress is 0')
        t.ok(moment.isDate(retry3[0].dateFailed), 'Job dateFailed is a date')
        t.equal(retry3[0].log.length, 3, 'Job has 3 log entries')
        t.ok(moment.isDate(retry3[0].log[2].logDate), 'Log logDate is a date')
        t.equal(retry3[0].log[2].queueId, q.id, 'Log queueId is valid')
        t.equal(retry3[0].log[2].logType, enums.log.error, 'Log type is error')
        t.equal(retry3[0].log[2].status, enums.jobStatus.retry, 'Log status is retry')
        t.equal(retry3[0].log[2].queueMessage, enums.message.failed, 'Log queueMessage is correct')
        t.ok(retry3[0].log[2].duration >= 0, 'Log duration is >= 0')
        t.equal(retry3[0].log[2].jobData, job.data, 'Log jobData is valid')
        t.pass('Job failure - third retry')
        return dbJobFailed(null, retry3[0], testData)
      }).then((failed) => {
        t.equal(failed[0].status, enums.jobStatus.failed, 'Job status is failed')
        t.equal(failed[0].retryCount, 3, 'Job retryCount is 3')
        t.equal(failed[0].progress, 0, 'Job progress is 0')
        t.ok(moment.isDate(failed[0].dateFailed), 'Job dateFailed is a date')
        t.equal(failed[0].log.length, 4, 'Job has 4 log entries')
        t.ok(moment.isDate(failed[0].log[3].logDate), 'Log logDate is a date')
        t.equal(failed[0].log[3].queueId, q.id, 'Log queueId is valid')
        t.equal(failed[0].log[3].logType, enums.log.error, 'Log type is error')
        t.equal(failed[0].log[3].status, enums.jobStatus.failed, 'Log status is failed')
        t.equal(failed[0].log[3].queueMessage, enums.message.failed, 'Log queueMessage is correct')
        t.ok(failed[0].log[3].duration >= 0, 'Log duration is >= 0')
        t.equal(failed[0].log[3].jobData, job.data, 'Log jobData is valid')
      }).then(() => {
        resolve()
      }).catch(err => t.fail(err))
    })
  })
}
